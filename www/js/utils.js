'use strict';

angular.module('mie.utils', []).factory('utils', function () {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        pad = function pad(val_, len_) {
        var val = String(val_);
        var len = len_ || 2;
        while (val.length < len) {
            val = '0' + val;
        }
        return val;
    };
    var dateFormat = function dateFormat(date, mask) {
        if (!date) {
            throw SyntaxError('invalid date');
        }
        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) === 'UTC:') {
            mask = mask.slice(4);
        }
        var d = date.getDate(),
            m = date.getMonth(),
            y = date.getFullYear(),
            flags = {
            dd: pad(d),
            mm: pad(m + 1),
            yyyy: y
        };
        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };

    function formatDate(date, mask) {
        return dateFormat(date, mask);
    }

    var cache = {};
    var Utils = {
        formatDate: formatDate,
        findWeekId: function findWeekId(dayDate) {
            var cached = cache[dayDate.toDateString()];
            if (cached) {
                return cached;
            }
            var date;
            if (dayDate.getDay() === 1) {
                date = new Date(dayDate.toString());
            } else {
                var tempDate = new Date(dayDate.toString());
                while (true) {
                    tempDate.setDate(tempDate.getDate() - 1);
                    if (tempDate.getMonth() !== dayDate.getMonth() || tempDate.getDay() === 0) {
                        var weekDate = new Date(tempDate.toString());
                        weekDate.setDate(tempDate.getDate() + 1);
                        date = weekDate;
                        break;
                    }
                }
            }
            var result = formatDate(date, 'yyyy-mm-dd');
            cache[dayDate.toDateString()] = result;
            return result;
        },
        findMonthId: function findMonthId(dayDate) {
            return formatDate(dayDate, 'yyyy-mm');
        },
        findQuarterId: function findQuarterId(dayDate) {
            return formatDate(dayDate, 'yyyy') + '-' + (Math.floor(dayDate.getMonth() / 3) + 1);
        },
        findYearId: function findYearId(dayDate) {
            return formatDate(dayDate, 'yyyy');
        }
    };
    return Utils;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQzFCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUNwQixRQUFJLEtBQUssR0FBRyxnRUFBZ0U7UUFBRSxHQUFHLEdBQUcsU0FBTixHQUFHLENBQWEsSUFBSSxFQUFFLElBQUksRUFBRTtBQUN0RyxZQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsWUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNwQixlQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO0FBQ3JCLGVBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ25CO0FBQ0QsZUFBTyxHQUFHLENBQUM7S0FDZCxDQUFDO0FBQ0YsUUFBSSxVQUFVLEdBQUcsU0FBYixVQUFVLENBQWEsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNuQyxZQUFJLENBQUMsSUFBSSxFQUFFO0FBQ1Asa0JBQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3JDOztBQUVELFlBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssTUFBTSxFQUFFO0FBQzdCLGdCQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QjtBQUNELFlBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQUUsS0FBSyxHQUFHO0FBQ3pFLGNBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ1YsY0FBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsZ0JBQUksRUFBRSxDQUFDO1NBQ1YsQ0FBQztBQUNGLGVBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUU7QUFDckMsbUJBQU8sRUFBRSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvRCxDQUFDLENBQUM7S0FDTixDQUFDOztBQUVGLGFBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDNUIsZUFBTyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2pDOztBQUdELFFBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLFFBQUksS0FBSyxHQUFHO0FBQ1Isa0JBQVUsRUFBRSxVQUFVO0FBQ3RCLGtCQUFVLEVBQUUsb0JBQVUsT0FBTyxFQUFFO0FBQzNCLGdCQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFDM0MsZ0JBQUksTUFBTSxFQUFFO0FBQ1IsdUJBQU8sTUFBTSxDQUFDO2FBQ2pCO0FBQ0QsZ0JBQUksSUFBSSxDQUFDO0FBQ1QsZ0JBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtBQUN4QixvQkFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDLE1BQ0k7QUFDRCxvQkFBSSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDNUMsdUJBQU8sSUFBSSxFQUFFO0FBQ1QsNEJBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLHdCQUFJLEFBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSyxRQUFRLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ3pFLDRCQUFJLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3QyxnQ0FBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekMsNEJBQUksR0FBRyxRQUFRLENBQUM7QUFDaEIsOEJBQU07cUJBQ1Q7aUJBQ0o7YUFDSjtBQUNELGdCQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzVDLGlCQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ3ZDLG1CQUFPLE1BQU0sQ0FBQztTQUNqQjtBQUNELG1CQUFXLEVBQUUscUJBQVUsT0FBTyxFQUFFO0FBQzVCLG1CQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDekM7QUFDRCxxQkFBYSxFQUFFLHVCQUFVLE9BQU8sRUFBRTtBQUM5QixtQkFBTyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsQUFBQyxDQUFDO1NBQ3ZGO0FBQ0Qsa0JBQVUsRUFBRSxvQkFBVSxPQUFPLEVBQUU7QUFDM0IsbUJBQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN0QztLQUNKLENBQUM7QUFDRixXQUFPLEtBQUssQ0FBQztDQUNoQixDQUFDLENBQUMiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnbWllLnV0aWxzJywgW10pXG4gICAgLmZhY3RvcnkoJ3V0aWxzJywgKCkgPT4ge1xuICAgICAgICB2YXIgdG9rZW4gPSAvZHsxLDR9fG17MSw0fXx5eSg/Onl5KT98KFtIaE1zVHRdKVxcMT98W0xsb1NaXXxcIlteXCJdKlwifCdbXiddKicvZywgcGFkID0gZnVuY3Rpb24gKHZhbF8sIGxlbl8pIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBTdHJpbmcodmFsXyk7XG4gICAgICAgICAgICB2YXIgbGVuID0gbGVuXyB8fCAyO1xuICAgICAgICAgICAgd2hpbGUgKHZhbC5sZW5ndGggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YWwgPSAnMCcgKyB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBtYXNrKSB7XG4gICAgICAgICAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBTeW50YXhFcnJvcignaW52YWxpZCBkYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBbGxvdyBzZXR0aW5nIHRoZSB1dGMgYXJndW1lbnQgdmlhIHRoZSBtYXNrXG4gICAgICAgICAgICBpZiAobWFzay5zbGljZSgwLCA0KSA9PT0gJ1VUQzonKSB7XG4gICAgICAgICAgICAgICAgbWFzayA9IG1hc2suc2xpY2UoNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZCA9IGRhdGUuZ2V0RGF0ZSgpLCBtID0gZGF0ZS5nZXRNb250aCgpLCB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpLCBmbGFncyA9IHtcbiAgICAgICAgICAgICAgICBkZDogcGFkKGQpLFxuICAgICAgICAgICAgICAgIG1tOiBwYWQobSArIDEpLFxuICAgICAgICAgICAgICAgIHl5eXk6IHlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFzay5yZXBsYWNlKHRva2VuLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJDAgaW4gZmxhZ3MgPyBmbGFnc1skMF0gOiAkMC5zbGljZSgxLCAkMC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgbWFzaykge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVGb3JtYXQoZGF0ZSwgbWFzayk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBjYWNoZSA9IHt9O1xuICAgICAgICB2YXIgVXRpbHMgPSB7XG4gICAgICAgICAgICBmb3JtYXREYXRlOiBmb3JtYXREYXRlLFxuICAgICAgICAgICAgZmluZFdlZWtJZDogZnVuY3Rpb24gKGRheURhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGVbZGF5RGF0ZS50b0RhdGVTdHJpbmcoKV07XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAoZGF5RGF0ZS5nZXREYXkoKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF5RGF0ZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wRGF0ZSA9IG5ldyBEYXRlKGRheURhdGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRGF0ZS5zZXREYXRlKHRlbXBEYXRlLmdldERhdGUoKSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0ZW1wRGF0ZS5nZXRNb250aCgpICE9PSBkYXlEYXRlLmdldE1vbnRoKCkpIHx8IHRlbXBEYXRlLmdldERheSgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdlZWtEYXRlID0gbmV3IERhdGUodGVtcERhdGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Vla0RhdGUuc2V0RGF0ZSh0ZW1wRGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gd2Vla0RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZvcm1hdERhdGUoZGF0ZSwgJ3l5eXktbW0tZGQnKTtcbiAgICAgICAgICAgICAgICBjYWNoZVtkYXlEYXRlLnRvRGF0ZVN0cmluZygpXSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmRNb250aElkOiBmdW5jdGlvbiAoZGF5RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRheURhdGUsICd5eXl5LW1tJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmluZFF1YXJ0ZXJJZDogZnVuY3Rpb24gKGRheURhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXlEYXRlLCAneXl5eScpICsgJy0nICsgKE1hdGguZmxvb3IoZGF5RGF0ZS5nZXRNb250aCgpIC8gMykgKyAxKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaW5kWWVhcklkOiBmdW5jdGlvbiAoZGF5RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRheURhdGUsICd5eXl5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBVdGlscztcbiAgICB9KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vanNzcmMifQ==