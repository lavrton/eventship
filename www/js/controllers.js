// FIRST APP OPENING CONTROLLER
// LOGIN CHECK
// SOME NEW EXTRA TIPS AND TOUR

'use strict';

angular.module('mie.controllers', ['mie.events', 'mie.settings']).controller('AppCtrl', ['$scope', '$location', '$ionicModal', '$rootScope', '$ionicSlideBoxDelegate', function ($scope, $location, $ionicModal, $rootScope, $ionicSlideBoxDelegate) {
    // Create the login modal that we will use later
    var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');
    $rootScope.user = $scope.user = ref.getAuth();

    $ionicModal.fromTemplateUrl('templates/login.html', {
        scope: $scope
    }).then(function (modal) {
        $scope.modal = modal;
        if ($rootScope.user) {
            $location.path('/events');
        } else {
            $scope.login();
        }
    });

    // Triggered in the login modal to close it
    $scope.closeLogin = function () {
        if ($scope.modal) {
            $scope.modal.hide();
        }
    };

    // Open the login modal
    $scope.login = function () {
        $scope.modal.show();
    };

    function redir(provider) {
        ref.authWithOAuthRedirect(provider, function (error, authData) {
            if (error) {
                console.log('Login Failed!', error);
            } else {

                console.log('Authenticated successfully with payload:', authData);
                $rootScope.user = $scope.user = authData;
                localStorage.setItem('logged', 'true');
                $location.path('/events');
            }
        });
    }
    // Perform the login action when the user submits the login form
    $scope.doLogin = function (provider) {
        redir(provider);
    };

    ref.onAuth(function (authData) {
        //$scope.closeLogin();
        if (authData) {
            $scope.closeLogin();
            $rootScope.user = $scope.user = authData;
            localStorage.setItem('logged', 'true');
            $location.path('/events');
        }
    });

    $ionicModal.fromTemplateUrl('templates/tour.html', {
        scope: $scope
    }).then(function (tour) {
        $scope.tour = tour;
        //tour.show();
    });

    // Triggered in the login modal to close it
    $scope.closeTour = function () {
        if ($scope.tour) {
            $scope.tour.hide();
        }
    };
}])

// MAIN PAGE WITH SUBMIT FORM AND LIST
.controller('EventsCtrl', ['$scope', 'Events', 'beautifyDate', '$ionicLoading', '$rootScope', function ($scope, Events, beautifyDate, $ionicLoading, $rootScope) {

    function start() {
        var isLogged = localStorage.getItem('logged');
        if (isLogged) {
            $scope.loadingIndicator = $ionicLoading.show({
                scope: $scope
            });
        }
        if (!isLogged) {
            return;
        }

        Events.load(function () {
            update();
            $ionicLoading.hide();
            $scope.$apply();
        });
    }

    start();

    $scope.beautifyDate = beautifyDate;
    $scope.selectedEvent = {};

    function update() {
        $scope.unsubmitType = Events.getUnsubmitType();
        $scope.submitDone = Events.isSubmitDone();
        $scope.event = Events.getUnsubmitNestedEvent();
        $scope.lastEventDate = Events.getUnsubmitDate();
        $scope.unsubmitVariants = Events.getNestedEventVariants();
        $scope.combinedEventsList = Events.getCombinedList();

        if (!$scope.submitDone && $scope.unsubmitType !== 'day' && $scope.unsubmitVariants.length === 1) {
            Events.submitNestedEvent($scope.event.type, $scope.unsubmitVariants[0].id);
        }
    }
    update();

    Events.onUpdate(_.debounce(function () {
        update();
        $scope.$apply();
    }, 500));

    $rootScope.$watch('user', function () {
        start();
    });

    $scope.createDayEvent = function (event) {
        Events.submitDayEvent(event.title, event.score);

        // reset form
        event.title = '';
        event.score = 2;

        update();
    };

    $scope.onScoreChange = function (event) {
        var placeholders = ['Bad :(? ANYTHING interesting here?', 'Not really good? So type your event...', 'Good day! What you was doing?', 'AWESOME?! What you did or made?'];
        event.placeholder = placeholders[event.score];
    };

    $scope.createNestedEvent = function () {
        var selectedDayId = $scope.selectedEvent.id;
        Events.submitNestedEvent($scope.event.type, selectedDayId);

        // reset form
        $scope.selectedEvent = {};

        update();
    };
}])

// EDIT EVENT
.controller('EventCtrl', ['$scope', '$stateParams', '$location', 'Events', 'beautifyDate', function ($scope, $stateParams, $location, Events, beautifyDate) {
    $scope.beautifyDate = beautifyDate;

    var id = $stateParams.id;
    var type = $stateParams.type;
    $scope.event = Events.getEvent(type, id);

    if (!$scope.event) {
        $location.path('/events');
        return;
    }
    if (type !== 'day') {
        $scope.variants = Events.getNestedEventVariants(type, id);
        $scope.selectedEvent = {
            id: $scope.event.selectedChildId
        };
    }

    $scope.$watch('selectedEvent.id', function () {
        var selectedDayId = $scope.selectedEvent.id;
        if (!selectedDayId) {
            return;
        }
        if (type === 'day') {
            return;
        }
        Events.updateNestedEvent(type, $scope.event.id, selectedDayId);
    });

    //throw new Error('Test Error');

    $scope.$watchGroup(['event.title', 'event.score'], function () {
        if (type !== 'day') {
            return;
        }
        Events.updateDayEvent(id, $scope.event.title, $scope.event.score);
    });
}]);
//# sourceMappingURL=data:application/json;base64,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QUFDMUQsY0FBTSxDQUFDLGFBQWEsR0FBRztBQUNuQixjQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlO1NBQ25DLENBQUM7S0FDTDs7QUFFRCxVQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDcEMsWUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7QUFDNUMsWUFBSSxDQUFDLGFBQWEsRUFBRTtBQUNoQixtQkFBTztTQUNWO0FBQ0QsWUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO0FBQ2hCLG1CQUFPO1NBQ1Y7QUFDRCxjQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0tBQ2xFLENBQUMsQ0FBQzs7OztBQUlILFVBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsWUFBTTtBQUNyRCxZQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7QUFDaEIsbUJBQU87U0FDVjtBQUNELGNBQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckUsQ0FBQyxDQUFDO0NBQ04sQ0FDSixDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGSVJTVCBBUFAgT1BFTklORyBDT05UUk9MTEVSXG4vLyBMT0dJTiBDSEVDS1xuLy8gU09NRSBORVcgRVhUUkEgVElQUyBBTkQgVE9VUlxuXG5hbmd1bGFyLm1vZHVsZSgnbWllLmNvbnRyb2xsZXJzJywgWydtaWUuZXZlbnRzJywgJ21pZS5zZXR0aW5ncyddKVxuICAgIC5jb250cm9sbGVyKCdBcHBDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRpb25pY01vZGFsJywgJyRyb290U2NvcGUnLCAnJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGlvbmljTW9kYWwsICRyb290U2NvcGUsICRpb25pY1NsaWRlQm94RGVsZWdhdGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgbG9naW4gbW9kYWwgdGhhdCB3ZSB3aWxsIHVzZSBsYXRlclxuICAgICAgICAgICAgbGV0IHJlZiA9IG5ldyBGaXJlYmFzZSgnaHR0cHM6Ly9pbmNhbmRlc2NlbnQtZmlyZS0xNDc2LmZpcmViYXNlaW8uY29tLycpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gJHNjb3BlLnVzZXIgPSByZWYuZ2V0QXV0aCgpO1xuXG4gICAgICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9sb2dpbi5odG1sJywge1xuICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGVcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKG1vZGFsKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2V2ZW50cycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2dpbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgLy8gVHJpZ2dlcmVkIGluIHRoZSBsb2dpbiBtb2RhbCB0byBjbG9zZSBpdFxuICAgICAgICAgICAgJHNjb3BlLmNsb3NlTG9naW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tb2RhbCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIE9wZW4gdGhlIGxvZ2luIG1vZGFsXG4gICAgICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vZGFsLnNob3coKTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVkaXIocHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICByZWYuYXV0aFdpdGhPQXV0aFJlZGlyZWN0KHByb3ZpZGVyLCBmdW5jdGlvbiAoZXJyb3IsIGF1dGhEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xvZ2luIEZhaWxlZCEnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBdXRoZW50aWNhdGVkIHN1Y2Nlc3NmdWxseSB3aXRoIHBheWxvYWQ6JywgYXV0aERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gJHNjb3BlLnVzZXIgPSBhdXRoRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsb2dnZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ldmVudHMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGVyZm9ybSB0aGUgbG9naW4gYWN0aW9uIHdoZW4gdGhlIHVzZXIgc3VibWl0cyB0aGUgbG9naW4gZm9ybVxuICAgICAgICAgICAgJHNjb3BlLmRvTG9naW4gPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICByZWRpcihwcm92aWRlcik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWYub25BdXRoKGZ1bmN0aW9uIChhdXRoRGF0YSkge1xuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmNsb3NlTG9naW4oKTtcbiAgICAgICAgICAgICAgICBpZiAoYXV0aERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlTG9naW4oKTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gJHNjb3BlLnVzZXIgPSBhdXRoRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvZ2dlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvZXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy90b3VyLmh0bWwnLCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodG91cikge1xuICAgICAgICAgICAgICAgICRzY29wZS50b3VyID0gdG91cjtcbiAgICAgICAgICAgICAgICAvL3RvdXIuc2hvdygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXJlZCBpbiB0aGUgbG9naW4gbW9kYWwgdG8gY2xvc2UgaXRcbiAgICAgICAgICAgICRzY29wZS5jbG9zZVRvdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS50b3VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50b3VyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXSlcblxuXG4gICAgLy8gTUFJTiBQQUdFIFdJVEggU1VCTUlUIEZPUk0gQU5EIExJU1RcbiAgICAuY29udHJvbGxlcignRXZlbnRzQ3RybCcsIFsnJHNjb3BlJywgJ0V2ZW50cycsICdiZWF1dGlmeURhdGUnLCAnJGlvbmljTG9hZGluZycsICckcm9vdFNjb3BlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgRXZlbnRzLCBiZWF1dGlmeURhdGUsICRpb25pY0xvYWRpbmcsICRyb290U2NvcGUpIHtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzTG9nZ2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvZ2dlZCcpO1xuICAgICAgICAgICAgICAgIGlmIChpc0xvZ2dlZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZ0luZGljYXRvciA9ICRpb25pY0xvYWRpbmcuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzTG9nZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBFdmVudHMubG9hZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGFydCgpO1xuXG5cbiAgICAgICAgICAgICRzY29wZS5iZWF1dGlmeURhdGUgPSBiZWF1dGlmeURhdGU7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFdmVudCA9IHt9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVuc3VibWl0VHlwZSA9IEV2ZW50cy5nZXRVbnN1Ym1pdFR5cGUoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0RG9uZSA9IEV2ZW50cy5pc1N1Ym1pdERvbmUoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnQgPSBFdmVudHMuZ2V0VW5zdWJtaXROZXN0ZWRFdmVudCgpO1xuICAgICAgICAgICAgICAgICRzY29wZS5sYXN0RXZlbnREYXRlID0gRXZlbnRzLmdldFVuc3VibWl0RGF0ZSgpO1xuICAgICAgICAgICAgICAgICRzY29wZS51bnN1Ym1pdFZhcmlhbnRzID0gRXZlbnRzLmdldE5lc3RlZEV2ZW50VmFyaWFudHMoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tYmluZWRFdmVudHNMaXN0ID0gRXZlbnRzLmdldENvbWJpbmVkTGlzdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuc3VibWl0RG9uZSAmJiAkc2NvcGUudW5zdWJtaXRUeXBlICE9PSAnZGF5JyAmJiAkc2NvcGUudW5zdWJtaXRWYXJpYW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRzLnN1Ym1pdE5lc3RlZEV2ZW50KCRzY29wZS5ldmVudC50eXBlLCAkc2NvcGUudW5zdWJtaXRWYXJpYW50c1swXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIEV2ZW50cy5vblVwZGF0ZShfLmRlYm91bmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICB9LCA1MDApKTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS4kd2F0Y2goJ3VzZXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhcnQoKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVEYXlFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIEV2ZW50cy5zdWJtaXREYXlFdmVudChldmVudC50aXRsZSwgZXZlbnQuc2NvcmUpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgZm9ybVxuICAgICAgICAgICAgICAgIGV2ZW50LnRpdGxlID0gJyc7XG4gICAgICAgICAgICAgICAgZXZlbnQuc2NvcmUgPSAyO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUub25TY29yZUNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ0JhZCA6KD8gQU5ZVEhJTkcgaW50ZXJlc3RpbmcgaGVyZT8nLFxuICAgICAgICAgICAgICAgICAgICAnTm90IHJlYWxseSBnb29kPyBTbyB0eXBlIHlvdXIgZXZlbnQuLi4nLFxuICAgICAgICAgICAgICAgICAgICAnR29vZCBkYXkhIFdoYXQgeW91IHdhcyBkb2luZz8nLFxuICAgICAgICAgICAgICAgICAgICAnQVdFU09NRT8hIFdoYXQgeW91IGRpZCBvciBtYWRlPydcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGV2ZW50LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXJzW2V2ZW50LnNjb3JlXTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU5lc3RlZEV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZERheUlkID0gJHNjb3BlLnNlbGVjdGVkRXZlbnQuaWQ7XG4gICAgICAgICAgICAgICAgRXZlbnRzLnN1Ym1pdE5lc3RlZEV2ZW50KCRzY29wZS5ldmVudC50eXBlLCBzZWxlY3RlZERheUlkKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGZvcm1cbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFdmVudCA9IHt9O1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXSlcblxuXG4gICAgLy8gRURJVCBFVkVOVFxuICAgIC5jb250cm9sbGVyKCdFdmVudEN0cmwnLCBbJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0V2ZW50cycsICdiZWF1dGlmeURhdGUnLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZVBhcmFtcywgJGxvY2F0aW9uLCBFdmVudHMsIGJlYXV0aWZ5RGF0ZSkge1xuICAgICAgICAkc2NvcGUuYmVhdXRpZnlEYXRlID0gYmVhdXRpZnlEYXRlO1xuXG4gICAgICAgIGxldCBpZCA9ICRzdGF0ZVBhcmFtcy5pZDtcbiAgICAgICAgbGV0IHR5cGUgPSAkc3RhdGVQYXJhbXMudHlwZTtcbiAgICAgICAgJHNjb3BlLmV2ZW50ID0gRXZlbnRzLmdldEV2ZW50KHR5cGUsIGlkKTtcblxuICAgICAgICBpZiAoISRzY29wZS5ldmVudCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ldmVudHMnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSAhPT0gJ2RheScpIHtcbiAgICAgICAgICAgICRzY29wZS52YXJpYW50cyA9IEV2ZW50cy5nZXROZXN0ZWRFdmVudFZhcmlhbnRzKHR5cGUsIGlkKTtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIGlkOiAkc2NvcGUuZXZlbnQuc2VsZWN0ZWRDaGlsZElkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2VsZWN0ZWRFdmVudC5pZCcsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZERheUlkID0gJHNjb3BlLnNlbGVjdGVkRXZlbnQuaWQ7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkRGF5SWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFdmVudHMudXBkYXRlTmVzdGVkRXZlbnQodHlwZSwgJHNjb3BlLmV2ZW50LmlkLCBzZWxlY3RlZERheUlkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoJ1Rlc3QgRXJyb3InKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoR3JvdXAoWydldmVudC50aXRsZScsICdldmVudC5zY29yZSddLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFdmVudHMudXBkYXRlRGF5RXZlbnQoaWQsICRzY29wZS5ldmVudC50aXRsZSwgJHNjb3BlLmV2ZW50LnNjb3JlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uL2pzc3JjIn0=