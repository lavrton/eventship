'use strict';

angular.module('mie.settings', ['mie.store']).factory('settings', ['store', function (store) {
    var Settings = {
        notificationTime: function notificationTime(time) {
            if (time) {
                // setter
                store.setting('notificationTime', time);
            } else {
                // getter
                return store.setting('notificationTime').then(function (t) {
                    if (!t || !parseInt(t)) {
                        t = 75600;
                    }
                    return t;
                });
            }
        },
        startDate: function startDate(date) {
            if (date) {
                store.setting('startDate', new Date(date).toString());
            } else {
                return store.setting('startDate').then(function (dd) {
                    var d = new Date(dd);
                    var isDateWrong = !d || isNaN(new Date(d).getYear()) || new Date(d).getFullYear() < 2012;
                    if (isDateWrong) {
                        d = new Date();
                        d.setDate(d.getDate() - 4);
                    }
                    return d;
                });
            }
        }
    };
    return Settings;
}]).controller('SettingsCtrl', ['$scope', 'settings', 'Events', function ($scope, settings, Events) {
    $scope.settings = {
        notificationTime: 0,
        startDate: new Date(),
        format: 12
    };

    settings.notificationTime().then(function (time) {
        $scope.settings.notificationTime = time;
        $scope.$apply();
    });

    settings.startDate().then(function (date) {
        $scope.settings.startDate = date;
        $scope.$apply();
    });

    $scope.isApp = !!window.cordova;

    $scope.$watch('settings.notificationTime', function (newValue) {
        settings.notificationTime(newValue);
    });

    $scope.$watch('settings.startDate', function (newValue) {
        if (newValue.toDateString() === new Date().toDateString()) {
            return;
        }
        settings.startDate(newValue);
        Events._setStartDate(newValue);
    });

    $scope.logout = function () {
        var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');
        ref.unauth();
        localStorage.clearItem('logged');
        location.reload();
    };
}]);
//# sourceMappingURL=data:application/json;base64,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RCxnQkFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZDLENBQUMsQ0FBQzs7QUFFSCxVQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsUUFBUSxFQUFFO0FBQ3BELFlBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDdkQsbUJBQU87U0FDVjtBQUNELGdCQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLGNBQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbEMsQ0FBQyxDQUFDOztBQUVILFVBQU0sQ0FBQyxNQUFNLEdBQUcsWUFBTTtBQUNsQixZQUFJLEdBQUcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQ3pFLFdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNiLG9CQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLGdCQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDckIsQ0FBQztDQUNMLENBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InNldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ21pZS5zZXR0aW5ncycsIFsnbWllLnN0b3JlJ10pXG4gICAgLmZhY3RvcnkoJ3NldHRpbmdzJywgWydzdG9yZScsIChzdG9yZSkgPT4ge1xuICAgICAgICB2YXIgU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBub3RpZmljYXRpb25UaW1lOiAodGltZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lKSB7IC8vIHNldHRlclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5zZXR0aW5nKCdub3RpZmljYXRpb25UaW1lJywgdGltZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZ2V0dGVyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZS5zZXR0aW5nKCdub3RpZmljYXRpb25UaW1lJykudGhlbigodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0IHx8ICFwYXJzZUludCh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSA3NTYwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnREYXRlOiAoZGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldHRpbmcoJ3N0YXJ0RGF0ZScsIG5ldyBEYXRlKGRhdGUpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZS5zZXR0aW5nKCdzdGFydERhdGUnKS50aGVuKChkZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBuZXcgRGF0ZShkZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNEYXRlV3JvbmcgPSAhZCB8fCBpc05hTihuZXcgRGF0ZShkKS5nZXRZZWFyKCkpIHx8IG5ldyBEYXRlKGQpLmdldEZ1bGxZZWFyKCkgPCAyMDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGF0ZVdyb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpIC0gNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2V0dGluZ3M7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ3RybCcsIFsnJHNjb3BlJywgJ3NldHRpbmdzJywgJ0V2ZW50cycsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsIHNldHRpbmdzLCBFdmVudHMpIHtcbiAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25UaW1lOiAwLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IDEyXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZXR0aW5ncy5ub3RpZmljYXRpb25UaW1lKCkudGhlbigodGltZSkgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5ub3RpZmljYXRpb25UaW1lID0gdGltZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2V0dGluZ3Muc3RhcnREYXRlKCkudGhlbigoZGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5zdGFydERhdGUgPSBkYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuaXNBcHAgPSAhIXdpbmRvdy5jb3Jkb3ZhO1xuXG5cbiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ3NldHRpbmdzLm5vdGlmaWNhdGlvblRpbWUnLCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5ub3RpZmljYXRpb25UaW1lKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdzZXR0aW5ncy5zdGFydERhdGUnLCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUudG9EYXRlU3RyaW5nKCkgPT09IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5zdGFydERhdGUobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIEV2ZW50cy5fc2V0U3RhcnREYXRlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUubG9nb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCByZWYgPSBuZXcgRmlyZWJhc2UoJ2h0dHBzOi8vaW5jYW5kZXNjZW50LWZpcmUtMTQ3Ni5maXJlYmFzZWlvLmNvbS8nKTtcbiAgICAgICAgICAgICAgICByZWYudW5hdXRoKCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFySXRlbSgnbG9nZ2VkJyk7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXSk7Il0sInNvdXJjZVJvb3QiOiIuLi8uLi9qc3NyYyJ9