'use strict';

angular.module('mie.settings', ['mie.store']).factory('settings', ['store', function (store) {
    var Settings = {
        notificationTime: function notificationTime(time) {
            if (time) {
                // setter
                store.setting('notificationTime', time);
            } else {
                // getter
                return store.setting('notificationTime').then(function (t) {
                    if (!t || !parseInt(t)) {
                        t = 75600;
                    }
                    return t;
                });
            }
        },
        startDate: function startDate(date) {
            if (date) {
                store.setting('startDate', new Date(date).toString());
            } else {
                return store.setting('startDate').then(function (dd) {
                    var d = new Date(dd);
                    var isDateWrong = !d || isNaN(new Date(d).getYear()) || new Date(d).getFullYear() < 2012;
                    if (isDateWrong) {
                        d = new Date();
                        d.setDate(d.getDate() - 4);
                    }
                    return d;
                });
            }
        }
    };
    return Settings;
}]).controller('SettingsCtrl', ['$scope', 'settings', 'Events', function ($scope, settings, Events) {
    $scope.settings = {
        notificationTime: 0,
        startDate: new Date(),
        format: 12
    };

    settings.notificationTime().then(function (time) {
        $scope.settings.notificationTime = time;
        $scope.$apply();
    });

    settings.startDate().then(function (date) {
        console.log('from server', date);
        $scope.settings.startDate = date;
        $scope.$apply();
    });

    $scope.isApp = !!window.cordova;

    $scope.$watch('settings.notificationTime', function (newValue) {
        settings.notificationTime(newValue);
    });

    $scope.$watch('settings.startDate', function (newValue) {
        if (newValue.toDateString() === new Date().toDateString()) {
            return;
        }
        settings.startDate(newValue);
        Events._setStartDate(newValue);
    });

    $scope.logout = function () {
        var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');
        ref.unauth();
        location.reload();
    };
}]);
//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLFVBQVUsUUFBUSxFQUFFO0FBQzNELGdCQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdkMsQ0FBQyxDQUFDOztBQUVILFVBQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxRQUFRLEVBQUU7QUFDcEQsWUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtBQUN2RCxtQkFBTztTQUNWO0FBQ0QsZ0JBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsY0FBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNsQyxDQUFDLENBQUM7O0FBRUgsVUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFNO0FBQ2xCLFlBQUksR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7QUFDekUsV0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2IsZ0JBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNyQixDQUFDO0NBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnbWllLnNldHRpbmdzJywgWydtaWUuc3RvcmUnXSlcbiAgICAuZmFjdG9yeSgnc2V0dGluZ3MnLCBbJ3N0b3JlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIHZhciBTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblRpbWU6ICh0aW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWUpIHsgLy8gc2V0dGVyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldHRpbmcoJ25vdGlmaWNhdGlvblRpbWUnLCB0aW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgLy8gZ2V0dGVyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZS5zZXR0aW5nKCdub3RpZmljYXRpb25UaW1lJykudGhlbigodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0IHx8ICFwYXJzZUludCh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSA3NTYwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnREYXRlOiAoZGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldHRpbmcoJ3N0YXJ0RGF0ZScsIG5ldyBEYXRlKGRhdGUpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZS5zZXR0aW5nKCdzdGFydERhdGUnKS50aGVuKChkZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBuZXcgRGF0ZShkZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNEYXRlV3JvbmcgPSAhZCB8fCBpc05hTihuZXcgRGF0ZShkKS5nZXRZZWFyKCkpIHx8IG5ldyBEYXRlKGQpLmdldEZ1bGxZZWFyKCkgPCAyMDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGF0ZVdyb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpIC0gNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2V0dGluZ3M7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ3RybCcsIFsnJHNjb3BlJywgJ3NldHRpbmdzJywgJ0V2ZW50cycsIGZ1bmN0aW9uICgkc2NvcGUsIHNldHRpbmdzLCBFdmVudHMpIHtcbiAgICAgICAgJHNjb3BlLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uVGltZTogMCxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGZvcm1hdDogMTJcbiAgICAgICAgfTtcblxuICAgICAgICBzZXR0aW5ncy5ub3RpZmljYXRpb25UaW1lKCkudGhlbigodGltZSkgPT4ge1xuICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzLm5vdGlmaWNhdGlvblRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzZXR0aW5ncy5zdGFydERhdGUoKS50aGVuKChkYXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZnJvbSBzZXJ2ZXInLCBkYXRlKTtcbiAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5zdGFydERhdGUgPSBkYXRlO1xuICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuaXNBcHAgPSAhIXdpbmRvdy5jb3Jkb3ZhO1xuXG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2V0dGluZ3Mubm90aWZpY2F0aW9uVGltZScsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgc2V0dGluZ3Mubm90aWZpY2F0aW9uVGltZShuZXdWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NldHRpbmdzLnN0YXJ0RGF0ZScsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLnRvRGF0ZVN0cmluZygpID09PSBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0dGluZ3Muc3RhcnREYXRlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIEV2ZW50cy5fc2V0U3RhcnREYXRlKG5ld1ZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLmxvZ291dCA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2luY2FuZGVzY2VudC1maXJlLTE0NzYuZmlyZWJhc2Vpby5jb20vXCIpO1xuICAgICAgICAgICAgcmVmLnVuYXV0aCgpO1xuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi9qc3NyYyJ9