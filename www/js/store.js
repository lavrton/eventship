'use strict';

angular.module('mie.store', []).service('store', ['$rootScope', function ($rootScope) {
    var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');

    function Store() {
        this._localEventsCopy = [];
        this.lastSyncTime = new Date(localStorage.getItem('lastSync'));
    }

    function isValidEventObject(obj) {
        // event must be object, not array
        if (obj instanceof Array) {
            return false;
        }
        // wrong data
        return !(!obj.type || !obj.id);
    }

    // PUBLIC METHODS
    Store.prototype.onUpdate = function (func) {
        if (!$rootScope.user) {
            return;
        }
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');

        function update(snap) {
            if (this._justSaved) {
                this._justSaved = false;
                return;
            }
            var events = snap.val();
            this._mergeFromRemote(events);
            func(this._prepareData(events));
        }

        // disable as too slow for now
        //eventsRef.on('value', update, this);
    };

    Store.prototype.save = function (event) {
        // TODO: rewrite to method
        event.updated = Date.now();
        var data = event.toObject();

        this._saveEventToLocal(data);
        this._saveEventToRemote(data);
    };

    Store.prototype.load = function (cb) {
        try {
            this._localEventsCopy = JSON.parse(localStorage.getItem('events') || '[]');
            this._filter();
            this._localEventsCopy.forEach(function (e) {
                e.updated = e.updated || Date.now();
            });
            this._saveAllLocal();
        } catch (e) {
            this._localEventsCopy = [];
            // throw error in async way for debugging information
            setTimeout(function () {
                throw e;
            });
        }
        this._sync();
        cb(this._prepareData(this._localEventsCopy));
    };

    Store.prototype._filter = function () {
        this._localEventsCopy = this._localEventsCopy.filter(isValidEventObject);
    };

    Store.prototype.setting = function (key, value) {
        if (!$rootScope.user) {
            return new Promise(function (resolve) {
                resolve(localStorage.getItem(key));
            });
        }
        var userRef = ref.child('users').child($rootScope.user.uid);
        if (typeof value !== 'undefined') {
            // setter
            userRef.child('settings').child(key).set(value);
            localStorage.setItem(key, value);
        } else {
            var promise = new Promise(function (resolve) {
                var localValue = localStorage.getItem(key);
                if (!localValue) {
                    userRef.child('settings').child(key).once('value', function (snap) {
                        var val = snap.val();
                        localStorage.setItem(key, val);
                        resolve(val);
                    });
                } else {
                    resolve(localValue);
                }
            });
            return promise;
        }
    };

    // PRIVATE METHODS

    Store.prototype._getRemoteEvents = function (cb) {
        if (!$rootScope.user) {
            cb([]);
            return;
        }
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');

        eventsRef.once('value', function (snap) {
            var events = snap.val();
            cb(events);
        });
    };

    Store.prototype._sync = function () {
        var _this = this;

        this._getRemoteEvents(function (events) {
            var updated = false;
            _.each(events, function (remote) {
                if (!isValidEventObject(remote)) {
                    return;
                }
                var local = _.find(_this._localEventsCopy, function (e) {
                    return e.id + e.type === remote.id + remote.type;
                });
                if (!local || remote.updated && local.updated < remote.updated) {
                    _this._saveEventToLocal(remote);
                    updated = true;
                }
                if (!remote.updated || local.updated > remote.updated) {
                    _this._saveEventToRemote(local);
                }
            });
            _.each(_this._localEventsCopy, function (local) {
                var remote = _.find(events, function (e) {
                    return e.id + e.type === local.id + local.type;
                });
                if (!remote || !remote.updated || remote.updated < local.updated) {
                    _this._saveEventToRemote(local);
                }
                if (remote && remote.updated && local.updated < remote.updated) {
                    _this._saveEventToLocal(remote);
                    updated = true;
                }
            });
            //if (updated) {
            //    this.
            //}
        });
        //let i = 0;
        //let delay = 5;
        //let save = () => {
        //    let event = this._localEventsCopy[i];
        //    this._saveEventToRemote(event);
        //    i++;
        //    if (i < this._localEventsCopy.length - 1) {
        //        setTimeout(save, delay);
        //    }
        //};
        //save();

        //this._localEventsCopy.forEach((e) => {
        //    this._saveEventToRemote(e);
        //});
        setTimeout(function () {
            _this._sync();
        }, 60 * 1000);
    };

    Store.prototype._mergeFromRemote = function (events) {
        var _this2 = this;

        _.each(events, function (remoteEvent) {
            if (isValidEventObject(remoteEvent)) {
                _this2._saveEventToLocal(remoteEvent);
            }
        });
    };

    Store.prototype._prepareData = function (data) {
        // data is array of all events
        var dayEvents = [];
        var nestedEvents = [];
        _.each(data, function (obj) {
            if (obj.type === 'day') {
                dayEvents.push(obj);
            } else {
                nestedEvents.push(obj);
            }
        });
        return {
            dayEvents: dayEvents, nestedEvents: nestedEvents
        };
    };

    Store.prototype._saveEventToLocal = function (event) {
        var toUpdate = _.find(this._localEventsCopy, function (e) {
            return e.id === event.id && e.type === event.type;
        });
        if (toUpdate) {
            _.merge(toUpdate, event);
        } else {
            if (event instanceof Array) {
                debugger;
                return;
            }
            this._localEventsCopy.push(event);
        }
        this._saveAllLocal();
    };

    Store.prototype._saveAllLocal = _.debounce(function () {
        localStorage.setItem('events', JSON.stringify(this._localEventsCopy));
    }, 50);

    Store.prototype._saveEventToRemote = function (event) {
        if (!$rootScope.user) {
            return;
        }
        this._justSaved = true;
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');
        if (!event.type) {
            debugger;
        }
        eventsRef.child(event.type + '-' + event.id).update(event);
    };

    return new Store();
}]);
//# sourceMappingURL=data:application/json;base64,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O0FBQ3ZCLFlBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUQsWUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxZQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtBQUNiLHFCQUFTO1NBQ1o7QUFDRCxpQkFBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlELENBQUM7O0FBRUYsV0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO0NBQ3RCLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InN0b3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ21pZS5zdG9yZScsIFtdKS5zZXJ2aWNlKCdzdG9yZScsIFsnJHJvb3RTY29wZScsICgkcm9vdFNjb3BlKSA9PiB7XG4gICAgbGV0IHJlZiA9IG5ldyBGaXJlYmFzZSgnaHR0cHM6Ly9pbmNhbmRlc2NlbnQtZmlyZS0xNDc2LmZpcmViYXNlaW8uY29tLycpO1xuXG4gICAgZnVuY3Rpb24gU3RvcmUoKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsRXZlbnRzQ29weSA9IFtdO1xuICAgICAgICB0aGlzLmxhc3RTeW5jVGltZSA9IG5ldyBEYXRlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYXN0U3luYycpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRXZlbnRPYmplY3Qob2JqKSB7XG4gICAgICAgIC8vIGV2ZW50IG11c3QgYmUgb2JqZWN0LCBub3QgYXJyYXlcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd3JvbmcgZGF0YVxuICAgICAgICByZXR1cm4gISghb2JqLnR5cGUgfHwgIW9iai5pZCk7XG4gICAgfVxuXG5cbiAgICAvLyBQVUJMSUMgTUVUSE9EU1xuICAgIFN0b3JlLnByb3RvdHlwZS5vblVwZGF0ZSA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS51c2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHVzZXJSZWYgPSByZWYuY2hpbGQoJ3VzZXJzJykuY2hpbGQoJHJvb3RTY29wZS51c2VyLnVpZCk7XG4gICAgICAgIGxldCBldmVudHNSZWYgPSB1c2VyUmVmLmNoaWxkKCdldmVudHMnKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoc25hcCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2p1c3RTYXZlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2p1c3RTYXZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBldmVudHMgPSBzbmFwLnZhbCgpO1xuICAgICAgICAgICAgdGhpcy5fbWVyZ2VGcm9tUmVtb3RlKGV2ZW50cyk7XG4gICAgICAgICAgICBmdW5jKHRoaXMuX3ByZXBhcmVEYXRhKGV2ZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGlzYWJsZSBhcyB0b28gc2xvdyBmb3Igbm93XG4gICAgICAgIC8vZXZlbnRzUmVmLm9uKCd2YWx1ZScsIHVwZGF0ZSwgdGhpcyk7XG4gICAgfTtcblxuICAgIFN0b3JlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIFRPRE86IHJld3JpdGUgdG8gbWV0aG9kXG4gICAgICAgIGV2ZW50LnVwZGF0ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgZGF0YSA9IGV2ZW50LnRvT2JqZWN0KCk7XG5cbiAgICAgICAgdGhpcy5fc2F2ZUV2ZW50VG9Mb2NhbChkYXRhKTtcbiAgICAgICAgdGhpcy5fc2F2ZUV2ZW50VG9SZW1vdGUoZGF0YSk7XG4gICAgfTtcblxuICAgIFN0b3JlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhbEV2ZW50c0NvcHkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdldmVudHMnKSB8fCAnW10nKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlcigpO1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxFdmVudHNDb3B5LmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnVwZGF0ZWQgPSBlLnVwZGF0ZWQgfHwgRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fc2F2ZUFsbExvY2FsKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsRXZlbnRzQ29weSA9IFtdO1xuICAgICAgICAgICAgLy8gdGhyb3cgZXJyb3IgaW4gYXN5bmMgd2F5IGZvciBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jKCk7XG4gICAgICAgIGNiKHRoaXMuX3ByZXBhcmVEYXRhKHRoaXMuX2xvY2FsRXZlbnRzQ29weSkpO1xuICAgIH07XG5cbiAgICBTdG9yZS5wcm90b3R5cGUuX2ZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9sb2NhbEV2ZW50c0NvcHkgPSB0aGlzLl9sb2NhbEV2ZW50c0NvcHkuZmlsdGVyKGlzVmFsaWRFdmVudE9iamVjdCk7XG4gICAgfTtcblxuICAgIFN0b3JlLnByb3RvdHlwZS5zZXR0aW5nID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLnVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdXNlclJlZiA9IHJlZi5jaGlsZCgndXNlcnMnKS5jaGlsZCgkcm9vdFNjb3BlLnVzZXIudWlkKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gc2V0dGVyXG4gICAgICAgICAgICB1c2VyUmVmLmNoaWxkKCdzZXR0aW5ncycpLmNoaWxkKGtleSkuc2V0KHZhbHVlKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBsb2NhbFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWxvY2FsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlclJlZi5jaGlsZCgnc2V0dGluZ3MnKS5jaGlsZChrZXkpLm9uY2UoJ3ZhbHVlJywgKHNuYXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzbmFwLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGxvY2FsVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLyBQUklWQVRFIE1FVEhPRFNcblxuICAgIFN0b3JlLnByb3RvdHlwZS5fZ2V0UmVtb3RlRXZlbnRzID0gZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLnVzZXIpIHtcbiAgICAgICAgICAgIGNiKFtdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdXNlclJlZiA9IHJlZi5jaGlsZCgndXNlcnMnKS5jaGlsZCgkcm9vdFNjb3BlLnVzZXIudWlkKTtcbiAgICAgICAgbGV0IGV2ZW50c1JlZiA9IHVzZXJSZWYuY2hpbGQoJ2V2ZW50cycpO1xuXG4gICAgICAgIGV2ZW50c1JlZi5vbmNlKCd2YWx1ZScsIChzbmFwKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRzID0gc25hcC52YWwoKTtcbiAgICAgICAgICAgIGNiKGV2ZW50cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTdG9yZS5wcm90b3R5cGUuX3N5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2dldFJlbW90ZUV2ZW50cygoZXZlbnRzKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5lYWNoKGV2ZW50cywgKHJlbW90ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEV2ZW50T2JqZWN0KHJlbW90ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbG9jYWwgPSBfLmZpbmQodGhpcy5fbG9jYWxFdmVudHNDb3B5LCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUuaWQgKyBlLnR5cGUpID09PSAocmVtb3RlLmlkICsgcmVtb3RlLnR5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghbG9jYWwgfHwgcmVtb3RlLnVwZGF0ZWQgJiYgKGxvY2FsLnVwZGF0ZWQgPCByZW1vdGUudXBkYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUV2ZW50VG9Mb2NhbChyZW1vdGUpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZW1vdGUudXBkYXRlZCB8fCBsb2NhbC51cGRhdGVkID4gcmVtb3RlLnVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUV2ZW50VG9SZW1vdGUobG9jYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXy5lYWNoKHRoaXMuX2xvY2FsRXZlbnRzQ29weSwgKGxvY2FsKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbW90ZSA9IF8uZmluZChldmVudHMsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZS5pZCArIGUudHlwZSkgPT09IChsb2NhbC5pZCArIGxvY2FsLnR5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghcmVtb3RlIHx8ICFyZW1vdGUudXBkYXRlZCB8fCAocmVtb3RlLnVwZGF0ZWQgPCBsb2NhbC51cGRhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlRXZlbnRUb1JlbW90ZShsb2NhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZW1vdGUgJiYgcmVtb3RlLnVwZGF0ZWQgJiYgbG9jYWwudXBkYXRlZCA8IHJlbW90ZS51cGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVFdmVudFRvTG9jYWwocmVtb3RlKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL2lmICh1cGRhdGVkKSB7XG4gICAgICAgICAgICAvLyAgICB0aGlzLlxuICAgICAgICAgICAgLy99XG4gICAgICAgIH0pO1xuICAgICAgICAvL2xldCBpID0gMDtcbiAgICAgICAgLy9sZXQgZGVsYXkgPSA1O1xuICAgICAgICAvL2xldCBzYXZlID0gKCkgPT4ge1xuICAgICAgICAvLyAgICBsZXQgZXZlbnQgPSB0aGlzLl9sb2NhbEV2ZW50c0NvcHlbaV07XG4gICAgICAgIC8vICAgIHRoaXMuX3NhdmVFdmVudFRvUmVtb3RlKGV2ZW50KTtcbiAgICAgICAgLy8gICAgaSsrO1xuICAgICAgICAvLyAgICBpZiAoaSA8IHRoaXMuX2xvY2FsRXZlbnRzQ29weS5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vICAgICAgICBzZXRUaW1lb3V0KHNhdmUsIGRlbGF5KTtcbiAgICAgICAgLy8gICAgfVxuICAgICAgICAvL307XG4gICAgICAgIC8vc2F2ZSgpO1xuXG4gICAgICAgIC8vdGhpcy5fbG9jYWxFdmVudHNDb3B5LmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgLy8gICAgdGhpcy5fc2F2ZUV2ZW50VG9SZW1vdGUoZSk7XG4gICAgICAgIC8vfSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3luYygpO1xuICAgICAgICB9LCA2MCAqIDEwMDApO1xuICAgIH07XG5cbiAgICBTdG9yZS5wcm90b3R5cGUuX21lcmdlRnJvbVJlbW90ZSA9IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICAgICAgXy5lYWNoKGV2ZW50cywgKHJlbW90ZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZEV2ZW50T2JqZWN0KHJlbW90ZUV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVFdmVudFRvTG9jYWwocmVtb3RlRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU3RvcmUucHJvdG90eXBlLl9wcmVwYXJlRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIC8vIGRhdGEgaXMgYXJyYXkgb2YgYWxsIGV2ZW50c1xuICAgICAgICBsZXQgZGF5RXZlbnRzID0gW107XG4gICAgICAgIGxldCBuZXN0ZWRFdmVudHMgPSBbXTtcbiAgICAgICAgXy5lYWNoKGRhdGEsIChvYmopID0+IHtcbiAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICBkYXlFdmVudHMucHVzaChvYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXN0ZWRFdmVudHMucHVzaChvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRheUV2ZW50cywgbmVzdGVkRXZlbnRzXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIFN0b3JlLnByb3RvdHlwZS5fc2F2ZUV2ZW50VG9Mb2NhbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBsZXQgdG9VcGRhdGUgPSBfLmZpbmQodGhpcy5fbG9jYWxFdmVudHNDb3B5LCAoZSkgPT4gZS5pZCA9PT0gZXZlbnQuaWQgJiYgZS50eXBlID09PSBldmVudC50eXBlKTtcbiAgICAgICAgaWYgKHRvVXBkYXRlKSB7XG4gICAgICAgICAgICBfLm1lcmdlKHRvVXBkYXRlLCBldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xvY2FsRXZlbnRzQ29weS5wdXNoKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zYXZlQWxsTG9jYWwoKTtcbiAgICB9O1xuXG4gICAgU3RvcmUucHJvdG90eXBlLl9zYXZlQWxsTG9jYWwgPSBfLmRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZXZlbnRzJywgSlNPTi5zdHJpbmdpZnkodGhpcy5fbG9jYWxFdmVudHNDb3B5KSk7XG4gICAgfSwgNTApO1xuXG4gICAgU3RvcmUucHJvdG90eXBlLl9zYXZlRXZlbnRUb1JlbW90ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoISRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2p1c3RTYXZlZCA9IHRydWU7XG4gICAgICAgIGxldCB1c2VyUmVmID0gcmVmLmNoaWxkKCd1c2VycycpLmNoaWxkKCRyb290U2NvcGUudXNlci51aWQpO1xuICAgICAgICBsZXQgZXZlbnRzUmVmID0gdXNlclJlZi5jaGlsZCgnZXZlbnRzJyk7XG4gICAgICAgIGlmICghZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRzUmVmLmNoaWxkKGV2ZW50LnR5cGUgKyAnLScgKyBldmVudC5pZCkudXBkYXRlKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBTdG9yZSgpO1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi9qc3NyYyJ9