'use strict';

angular.module('mie.store', []).service('store', ['$rootScope', function ($rootScope) {
    var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');

    function Store() {
        this._localEventsCopy = [];
        this.lastSyncTime = new Date(localStorage.getItem('lastSync'));
    }

    function isValidEventObject(obj) {
        // event must be object, not array
        if (obj instanceof Array) {
            return false;
        }
        // wrong data
        return !(!obj.type || !obj.id);
    }

    // PUBLIC METHODS
    Store.prototype.onUpdate = function (func) {
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');

        function update(snap) {
            if (this._justSaved) {
                this._justSaved = false;
                return;
            }
            var events = snap.val();
            this._mergeFromRemote(events);
            func(this._prepareData(events));
        }

        // disable as too slow for now
        //eventsRef.on('value', update, this);
    };

    Store.prototype.save = function (event) {
        // TODO: rewrite to method
        event.updated = Date.now();
        var data = event.toObject();

        this._saveEventToLocal(data);
        this._saveEventToRemote(data);
    };

    Store.prototype.load = function (cb) {
        try {
            this._localEventsCopy = JSON.parse(localStorage.getItem('events') || '[]');
            this._filter();
            this._localEventsCopy.forEach(function (e) {
                e.updated = e.updated || Date.now();
            });
            this._saveAllLocal();
        } catch (e) {
            this._localEventsCopy = [];
            // throw error in async way for debugging information
            setTimeout(function () {
                throw e;
            });
        }
        this._sync();
        cb(this._prepareData(this._localEventsCopy));
    };

    Store.prototype._filter = function () {
        this._localEventsCopy = this._localEventsCopy.filter(isValidEventObject);
    };

    Store.prototype.setting = function (key, value) {
        var userRef = ref.child('users').child($rootScope.user.uid);
        if (typeof value !== 'undefined') {
            // setter
            userRef.child('settings').child(key).set(value);
            localStorage.setItem(key, value);
        } else {
            var promise = new Promise(function (resolve) {
                var localValue = localStorage.getItem(key);
                if (!localValue) {
                    userRef.child('settings').child(key).once('value', function (snap) {
                        var val = snap.val();
                        localStorage.setItem(key, val);
                        resolve(val);
                    });
                } else {
                    resolve(localValue);
                }
            });
            return promise;
        }
    };

    // PRIVATE METHODS

    Store.prototype._getRemoteEvents = function (cb) {
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');

        eventsRef.once('value', function (snap) {
            var events = snap.val();
            cb(events);
        });
    };

    Store.prototype._sync = function () {
        var _this = this;

        this._getRemoteEvents(function (events) {
            var updated = false;
            _.each(events, function (remote) {
                if (!isValidEventObject(remote)) {
                    return;
                }
                var local = _.find(_this._localEventsCopy, function (e) {
                    return e.id + e.type === remote.id + remote.type;
                });
                if (!local || remote.updated && local.updated < remote.updated) {
                    _this._saveEventToLocal(remote);
                    updated = true;
                }
                if (!remote.updated || local.updated > remote.updated) {
                    _this._saveEventToRemote(local);
                }
            });
            _.each(_this._localEventsCopy, function (local) {
                var remote = _.find(events, function (e) {
                    return e.id + e.type === local.id + local.type;
                });
                if (!remote || !remote.updated || remote.updated < local.updated) {
                    _this._saveEventToRemote(local);
                }
                if (remote.updated && local.updated < remote.updated) {
                    _this._saveEventToLocal(remote);
                    updated = true;
                }
            });
            //if (updated) {
            //    this.
            //}
        });
        //let i = 0;
        //let delay = 5;
        //let save = () => {
        //    let event = this._localEventsCopy[i];
        //    this._saveEventToRemote(event);
        //    i++;
        //    if (i < this._localEventsCopy.length - 1) {
        //        setTimeout(save, delay);
        //    }
        //};
        //save();

        //this._localEventsCopy.forEach((e) => {
        //    this._saveEventToRemote(e);
        //});
        setTimeout(function () {
            _this._sync();
        }, 60 * 1000);
    };

    Store.prototype._mergeFromRemote = function (events) {
        var _this2 = this;

        _.each(events, function (remoteEvent) {
            if (isValidEventObject(remoteEvent)) {
                _this2._saveEventToLocal(remoteEvent);
            }
        });
    };

    Store.prototype._prepareData = function (data) {
        // data is array of all events
        var dayEvents = [];
        var nestedEvents = [];
        _.each(data, function (obj) {
            if (obj.type === 'day') {
                dayEvents.push(obj);
            } else {
                nestedEvents.push(obj);
            }
        });
        return {
            dayEvents: dayEvents, nestedEvents: nestedEvents
        };
    };

    Store.prototype._saveEventToLocal = function (event) {
        var toUpdate = _.find(this._localEventsCopy, function (e) {
            return e.id === event.id && e.type === event.type;
        });
        if (toUpdate) {
            _.merge(toUpdate, event);
        } else {
            if (event instanceof Array) {
                debugger;
                return;
            }
            this._localEventsCopy.push(event);
        }
        this._saveAllLocal();
    };

    Store.prototype._saveAllLocal = _.debounce(function () {
        localStorage.setItem('events', JSON.stringify(this._localEventsCopy));
    }, 50);

    Store.prototype._saveEventToRemote = function (event) {
        this._justSaved = true;
        var userRef = ref.child('users').child($rootScope.user.uid);
        var eventsRef = userRef.child('events');
        if (!event.type) {
            debugger;
        }
        eventsRef.child(event.type + '-' + event.id).update(event);
    };

    return new Store();
}]);
//# sourceMappingURL=data:application/json;base64,