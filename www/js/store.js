'use strict';

angular.module('mie.store', []).factory('store', ['$rootScope', function ($rootScope) {

    var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');

    return {
        onUpdate: function onUpdate() {},
        save: function save(event) {
            console.log('save', event);
            var userRef = ref.child('users').child($rootScope.user.uid);
            var eventsRef = userRef.child('events');
            eventsRef.child(event.type + '-' + event.id).update(event.toObject());
        },
        load: function load(cb) {
            var userRef = ref.child('users').child($rootScope.user.uid);
            var eventsRef = userRef.child('events');
            eventsRef.once('value', function (snap) {
                var dayEvents = [];
                var nestedEvents = [];
                angular.forEach(snap.val(), function (obj) {
                    if (obj.type === 'day') {
                        dayEvents.push(obj);
                    } else {
                        nestedEvents.push(obj);
                    }
                });
                cb({ dayEvents: dayEvents, nestedEvents: nestedEvents });
            });
        },
        setting: function setting(key, value) {
            var userRef = ref.child('users').child($rootScope.user.uid);
            if (typeof value !== 'undefined') {
                // setter
                userRef.child('settings').child(key).set(value);
            } else {
                var promise = new Promise(function (resolve, reject) {
                    userRef.child('settings').child(key).once('value', function (snap) {
                        resolve(snap.val());
                    });
                });
                return promise;
            }
        }
    };
}]);
//# sourceMappingURL=data:application/json;base64,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U0FDSjtLQUNKLENBQUM7Q0FDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzdG9yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdtaWUuc3RvcmUnLCBbXSlcbiAgICAuZmFjdG9yeSgnc3RvcmUnLCBbJyRyb290U2NvcGUnLCAoJHJvb3RTY29wZSkgPT4ge1xuXG4gICAgICAgIGxldCByZWYgPSBuZXcgRmlyZWJhc2UoJ2h0dHBzOi8vaW5jYW5kZXNjZW50LWZpcmUtMTQ3Ni5maXJlYmFzZWlvLmNvbS8nKTtcblxuXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uVXBkYXRlOiAoKSA9PiB7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZScsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICBsZXQgdXNlclJlZiA9IHJlZi5jaGlsZChcInVzZXJzXCIpLmNoaWxkKCRyb290U2NvcGUudXNlci51aWQpO1xuICAgICAgICAgICAgICAgIGxldCBldmVudHNSZWYgPSB1c2VyUmVmLmNoaWxkKCdldmVudHMnKTtcbiAgICAgICAgICAgICAgICBldmVudHNSZWYuY2hpbGQoZXZlbnQudHlwZSArICctJyArIGV2ZW50LmlkKS51cGRhdGUoZXZlbnQudG9PYmplY3QoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICAgICAgICBsZXQgdXNlclJlZiA9IHJlZi5jaGlsZChcInVzZXJzXCIpLmNoaWxkKCRyb290U2NvcGUudXNlci51aWQpO1xuICAgICAgICAgICAgICAgIGxldCBldmVudHNSZWYgPSB1c2VyUmVmLmNoaWxkKCdldmVudHMnKTtcbiAgICAgICAgICAgICAgICBldmVudHNSZWYub25jZSgndmFsdWUnLCAoc25hcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF5RXZlbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXN0ZWRFdmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNuYXAudmFsKCksIChvYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlFdmVudHMucHVzaChvYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWRFdmVudHMucHVzaChvYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY2Ioe2RheUV2ZW50cywgbmVzdGVkRXZlbnRzfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0dGluZzogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdXNlclJlZiA9IHJlZi5jaGlsZChcInVzZXJzXCIpLmNoaWxkKCRyb290U2NvcGUudXNlci51aWQpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7ICAvLyBzZXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgdXNlclJlZi5jaGlsZCgnc2V0dGluZ3MnKS5jaGlsZChrZXkpLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyUmVmLmNoaWxkKCdzZXR0aW5ncycpLmNoaWxkKGtleSkub25jZSgndmFsdWUnLCAoc25hcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc25hcC52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vanNzcmMifQ==