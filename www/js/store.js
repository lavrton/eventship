'use strict';

angular.module('mie.store', []).factory('store', ['$rootScope', function ($rootScope) {

    var ref = new Firebase('https://incandescent-fire-1476.firebaseio.com/');

    return {
        save: function save(event) {
            console.log('save', event);
            var userRef = ref.child('users').child($rootScope.user.uid);
            var eventsRef = userRef.child('events');
            eventsRef.child(event.type + '-' + event.id).update(event.toObject());
        },
        load: function load(cb) {
            var userRef = ref.child('users').child($rootScope.user.uid);
            var eventsRef = userRef.child('events');
            eventsRef.once('value', function (snap) {
                var dayEvents = [];
                var nestedEvents = [];
                angular.forEach(snap.val(), function (obj) {
                    if (obj.type === 'day') {
                        dayEvents.push(obj);
                    } else {
                        nestedEvents.push(obj);
                    }
                });
                cb({ dayEvents: dayEvents, nestedEvents: nestedEvents });
            });
        },
        setting: function setting(key, value) {
            var userRef = ref.child('users').child($rootScope.user.uid);
            if (typeof value !== 'undefined') {
                // setter
                userRef.child('settings').child(key).set(value);
            } else {
                var promise = new Promise(function (resolve, reject) {
                    userRef.child('settings').child(key).once('value', function (snap) {
                        resolve(snap.val());
                    });
                });
                return promise;
            }
        }
    };
}]);
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQyIsImZpbGUiOiJzdG9yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdtaWUuc3RvcmUnLCBbXSlcbiAgICAuZmFjdG9yeSgnc3RvcmUnLCBbJyRyb290U2NvcGUnLCAoJHJvb3RTY29wZSkgPT4ge1xuXG4gICAgICAgIGxldCByZWYgPSBuZXcgRmlyZWJhc2UoJ2h0dHBzOi8vaW5jYW5kZXNjZW50LWZpcmUtMTQ3Ni5maXJlYmFzZWlvLmNvbS8nKTtcblxuXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNhdmU6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzYXZlJywgZXZlbnQpO1xuICAgICAgICAgICAgICAgIGxldCB1c2VyUmVmID0gcmVmLmNoaWxkKFwidXNlcnNcIikuY2hpbGQoJHJvb3RTY29wZS51c2VyLnVpZCk7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50c1JlZiA9IHVzZXJSZWYuY2hpbGQoJ2V2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2ZW50c1JlZi5jaGlsZChldmVudC50eXBlICsgJy0nICsgZXZlbnQuaWQpLnVwZGF0ZShldmVudC50b09iamVjdCgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkOiBmdW5jdGlvbihjYikge1xuICAgICAgICAgICAgICAgIGxldCB1c2VyUmVmID0gcmVmLmNoaWxkKFwidXNlcnNcIikuY2hpbGQoJHJvb3RTY29wZS51c2VyLnVpZCk7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50c1JlZiA9IHVzZXJSZWYuY2hpbGQoJ2V2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2ZW50c1JlZi5vbmNlKCd2YWx1ZScsIChzbmFwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXlFdmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5lc3RlZEV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc25hcC52YWwoKSwgKG9iaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSAnZGF5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheUV2ZW50cy5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZEV2ZW50cy5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYih7ZGF5RXZlbnRzLCBuZXN0ZWRFdmVudHN9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXR0aW5nOiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB1c2VyUmVmID0gcmVmLmNoaWxkKFwidXNlcnNcIikuY2hpbGQoJHJvb3RTY29wZS51c2VyLnVpZCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHsgIC8vIHNldHRlclxuICAgICAgICAgICAgICAgICAgICB1c2VyUmVmLmNoaWxkKCdzZXR0aW5ncycpLmNoaWxkKGtleSkuc2V0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJSZWYuY2hpbGQoJ3NldHRpbmdzJykuY2hpbGQoa2V5KS5vbmNlKCd2YWx1ZScsIChzbmFwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzbmFwLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi9qc3NyYyJ9