// EventShip Starter App

// angular.module is a global place for creating, registering
// and retrieving Angular modules
'use strict';

angular.module('mie', ['ionic', 'mie.controllers', 'ionic-timepicker']).run(function ($ionicPlatform) {
    $ionicPlatform.ready(function () {
        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
        // for form inputs)
        if (window.cordova && window.cordova.plugins.Keyboard) {
            window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        }
        if (window.StatusBar) {
            // org.apache.cordova.statusbar required
            window.StatusBar.styleDefault();
        }
    });
}).config(function ($stateProvider, $urlRouterProvider, $provide) {
    $stateProvider.state('app', {
        url: '/app',
        abstract: true,
        templateUrl: 'templates/menu.html',
        controller: 'AppCtrl'
    }).state('app.events', {
        url: '/events',
        views: {
            'menuContent': {
                templateUrl: 'templates/events.html',
                controller: 'EventsCtrl'
            }
        }
    }).state('app.single', {
        url: '/events/:type/:id',
        views: {
            'menuContent': {
                templateUrl: 'templates/event.html',
                controller: 'EventCtrl'
            }
        }
    }).state('app.settings', {
        url: '/settings',
        views: {
            'menuContent': {
                templateUrl: 'templates/settings.html',
                controller: 'SettingsCtrl'
            }
        }
    });
    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/app/events');

    // exception handler
    $provide.decorator('$exceptionHandler', ['$delegate', function ($delegate) {
        return function (exception, cause) {
            var isProduction = location.href.indexOf('localhost') === -1;
            if (isProduction) {
                window.Rollbar.error(exception);
            }
            $delegate(exception, cause);
        };
    }]);
});

function onUpdateReady() {
    if (confirm('New version is ready. Update?')) {
        window.location.reload();
    }
}

function checkUpdates() {
    var cache = window.applicationCache;
    if (!cache) {
        return;
    }
    if (cache.status === cache.UPDATEREADY) {
        onUpdateReady();
    }
    cache.addEventListener('updateready', onUpdateReady);
}

checkUpdates();
//# sourceMappingURL=data:application/json;base64,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QWdCLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0NBQ3hEOztBQUVELFlBQVksRUFBRSxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEV2ZW50U2hpcCBTdGFydGVyIEFwcFxuXG5cbi8vIGFuZ3VsYXIubW9kdWxlIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmdcbi8vIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXIgbW9kdWxlc1xuYW5ndWxhci5tb2R1bGUoJ21pZScsIFsnaW9uaWMnLCAnbWllLmNvbnRyb2xsZXJzJywgJ2lvbmljLXRpbWVwaWNrZXInXSlcbiAgICAucnVuKGZ1bmN0aW9uICgkaW9uaWNQbGF0Zm9ybSkge1xuICAgICAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBhY2Nlc3NvcnkgYmFyIGJ5IGRlZmF1bHQgKHJlbW92ZSB0aGlzIHRvIHNob3cgdGhlIGFjY2Vzc29yeSBiYXIgYWJvdmUgdGhlIGtleWJvYXJkXG4gICAgICAgICAgICAvLyBmb3IgZm9ybSBpbnB1dHMpXG4gICAgICAgICAgICBpZiAod2luZG93LmNvcmRvdmEgJiYgd2luZG93LmNvcmRvdmEucGx1Z2lucy5LZXlib2FyZCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdpbmRvdy5TdGF0dXNCYXIpIHtcbiAgICAgICAgICAgICAgICAvLyBvcmcuYXBhY2hlLmNvcmRvdmEuc3RhdHVzYmFyIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgd2luZG93LlN0YXR1c0Jhci5zdHlsZURlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSlcblxuICAgIC5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRwcm92aWRlKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnYXBwJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9hcHAnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL21lbnUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcEN0cmwnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2FwcC5ldmVudHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2V2ZW50cycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ21lbnVDb250ZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvZXZlbnRzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0V2ZW50c0N0cmwnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2FwcC5zaW5nbGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2V2ZW50cy86dHlwZS86aWQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdtZW51Q29udGVudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2V2ZW50Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0V2ZW50Q3RybCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnYXBwLnNldHRpbmdzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ21lbnVDb250ZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvc2V0dGluZ3MuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2V0dGluZ3NDdHJsJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIG5vbmUgb2YgdGhlIGFib3ZlIHN0YXRlcyBhcmUgbWF0Y2hlZCwgdXNlIHRoaXMgYXMgdGhlIGZhbGxiYWNrXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9hcHAvZXZlbnRzJyk7XG5cbiAgICAgICAgLy8gZXhjZXB0aW9uIGhhbmRsZXJcbiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckZXhjZXB0aW9uSGFuZGxlcicsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXNQcm9kdWN0aW9uID0gKGxvY2F0aW9uLmhyZWYuaW5kZXhPZignbG9jYWxob3N0JykgPT09IC0xKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5Sb2xsYmFyLmVycm9yKGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRkZWxlZ2F0ZShleGNlcHRpb24sIGNhdXNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICB9KTtcblxuZnVuY3Rpb24gb25VcGRhdGVSZWFkeSgpIHtcbiAgICBpZiAoY29uZmlybSgnTmV3IHZlcnNpb24gaXMgcmVhZHkuIFVwZGF0ZT8nKSkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNoZWNrVXBkYXRlcygpIHtcbiAgICBsZXQgY2FjaGUgPSB3aW5kb3cuYXBwbGljYXRpb25DYWNoZTtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlLnN0YXR1cyA9PT0gY2FjaGUuVVBEQVRFUkVBRFkpIHtcbiAgICAgICAgb25VcGRhdGVSZWFkeSgpO1xuICAgIH1cbiAgICBjYWNoZS5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVyZWFkeScsIG9uVXBkYXRlUmVhZHkpO1xufVxuXG5jaGVja1VwZGF0ZXMoKTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vanNzcmMifQ==